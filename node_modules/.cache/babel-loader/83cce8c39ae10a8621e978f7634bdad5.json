{"ast":null,"code":"import _toConsumableArray from \"/Users/mast/Projects/Portfolio/themeforest-GWahQa9C-tokyo-react-personal-portfolio-template/tokyo/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/Users/mast/Projects/Portfolio/themeforest-GWahQa9C-tokyo-react-personal-portfolio-template/tokyo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/Users/mast/Projects/Portfolio/themeforest-GWahQa9C-tokyo-react-personal-portfolio-template/tokyo/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/mast/Projects/Portfolio/themeforest-GWahQa9C-tokyo-react-personal-portfolio-template/tokyo/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { createMat4 } from './math-utils';\nimport { zoomToScale, pixelsToWorld, lngLatToWorld, worldToLngLat, worldToPixels, altitudeToFovy, fovyToAltitude, DEFAULT_ALTITUDE, getProjectionMatrix, getDistanceScales, getViewMatrix } from './web-mercator-utils';\nimport _fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\nvar WebMercatorViewport = /*#__PURE__*/function () {\n  function WebMercatorViewport() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      width: 1,\n      height: 1\n    },\n        width = _ref.width,\n        height = _ref.height,\n        _ref$latitude = _ref.latitude,\n        latitude = _ref$latitude === void 0 ? 0 : _ref$latitude,\n        _ref$longitude = _ref.longitude,\n        longitude = _ref$longitude === void 0 ? 0 : _ref$longitude,\n        _ref$zoom = _ref.zoom,\n        zoom = _ref$zoom === void 0 ? 0 : _ref$zoom,\n        _ref$pitch = _ref.pitch,\n        pitch = _ref$pitch === void 0 ? 0 : _ref$pitch,\n        _ref$bearing = _ref.bearing,\n        bearing = _ref$bearing === void 0 ? 0 : _ref$bearing,\n        _ref$altitude = _ref.altitude,\n        altitude = _ref$altitude === void 0 ? null : _ref$altitude,\n        _ref$fovy = _ref.fovy,\n        fovy = _ref$fovy === void 0 ? null : _ref$fovy,\n        _ref$position = _ref.position,\n        position = _ref$position === void 0 ? null : _ref$position,\n        _ref$nearZMultiplier = _ref.nearZMultiplier,\n        nearZMultiplier = _ref$nearZMultiplier === void 0 ? 0.02 : _ref$nearZMultiplier,\n        _ref$farZMultiplier = _ref.farZMultiplier,\n        farZMultiplier = _ref$farZMultiplier === void 0 ? 1.01 : _ref$farZMultiplier;\n\n    _classCallCheck(this, WebMercatorViewport);\n\n    width = width || 1;\n    height = height || 1;\n\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    var scale = zoomToScale(zoom);\n    altitude = Math.max(0.75, altitude);\n    var distanceScales = getDistanceScales({\n      longitude: longitude,\n      latitude: latitude\n    });\n    var center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width: width,\n      height: height,\n      pitch: pitch,\n      fovy: fovy,\n      nearZMultiplier: nearZMultiplier,\n      farZMultiplier: farZMultiplier\n    });\n    this.viewMatrix = getViewMatrix({\n      height: height,\n      scale: scale,\n      center: center,\n      pitch: pitch,\n      bearing: bearing,\n      altitude: altitude\n    });\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n    Object.freeze(this);\n  }\n\n  _createClass(WebMercatorViewport, [{\n    key: \"_initMatrices\",\n    value: function _initMatrices() {\n      var width = this.width,\n          height = this.height,\n          projectionMatrix = this.projectionMatrix,\n          viewMatrix = this.viewMatrix;\n      var vpm = createMat4();\n      mat4.multiply(vpm, vpm, projectionMatrix);\n      mat4.multiply(vpm, vpm, viewMatrix);\n      this.viewProjectionMatrix = vpm;\n      var m = createMat4();\n      mat4.scale(m, m, [width / 2, -height / 2, 1]);\n      mat4.translate(m, m, [1, -1, 0]);\n      mat4.multiply(m, m, vpm);\n      var mInverse = mat4.invert(createMat4(), m);\n\n      if (!mInverse) {\n        throw new Error('Pixel project matrix not invertible');\n      }\n\n      this.pixelProjectionMatrix = m;\n      this.pixelUnprojectionMatrix = mInverse;\n    }\n  }, {\n    key: \"equals\",\n    value: function equals(viewport) {\n      if (!(viewport instanceof WebMercatorViewport)) {\n        return false;\n      }\n\n      return viewport.width === this.width && viewport.height === this.height && mat4.equals(viewport.projectionMatrix, this.projectionMatrix) && mat4.equals(viewport.viewMatrix, this.viewMatrix);\n    }\n  }, {\n    key: \"project\",\n    value: function project(xyz) {\n      var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref2$topLeft = _ref2.topLeft,\n          topLeft = _ref2$topLeft === void 0 ? true : _ref2$topLeft;\n\n      var worldPosition = this.projectPosition(xyz);\n      var coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n      var _coord = _slicedToArray(coord, 2),\n          x = _coord[0],\n          y = _coord[1];\n\n      var y2 = topLeft ? y : this.height - y;\n      return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n    }\n  }, {\n    key: \"unproject\",\n    value: function unproject(xyz) {\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref3$topLeft = _ref3.topLeft,\n          topLeft = _ref3$topLeft === void 0 ? true : _ref3$topLeft,\n          _ref3$targetZ = _ref3.targetZ,\n          targetZ = _ref3$targetZ === void 0 ? undefined : _ref3$targetZ;\n\n      var _xyz = _slicedToArray(xyz, 3),\n          x = _xyz[0],\n          y = _xyz[1],\n          z = _xyz[2];\n\n      var y2 = topLeft ? y : this.height - y;\n      var targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n      var coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n\n      var _this$unprojectPositi = this.unprojectPosition(coord),\n          _this$unprojectPositi2 = _slicedToArray(_this$unprojectPositi, 3),\n          X = _this$unprojectPositi2[0],\n          Y = _this$unprojectPositi2[1],\n          Z = _this$unprojectPositi2[2];\n\n      if (Number.isFinite(z)) {\n        return [X, Y, Z];\n      }\n\n      return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n    }\n  }, {\n    key: \"projectPosition\",\n    value: function projectPosition(xyz) {\n      var _lngLatToWorld = lngLatToWorld(xyz),\n          _lngLatToWorld2 = _slicedToArray(_lngLatToWorld, 2),\n          X = _lngLatToWorld2[0],\n          Y = _lngLatToWorld2[1];\n\n      var Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"unprojectPosition\",\n    value: function unprojectPosition(xyz) {\n      var _worldToLngLat = worldToLngLat(xyz),\n          _worldToLngLat2 = _slicedToArray(_worldToLngLat, 2),\n          X = _worldToLngLat2[0],\n          Y = _worldToLngLat2[1];\n\n      var Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n      return [X, Y, Z];\n    }\n  }, {\n    key: \"projectFlat\",\n    value: function projectFlat(lngLat) {\n      return lngLatToWorld(lngLat);\n    }\n  }, {\n    key: \"unprojectFlat\",\n    value: function unprojectFlat(xy) {\n      return worldToLngLat(xy);\n    }\n  }, {\n    key: \"getMapCenterByLngLatPosition\",\n    value: function getMapCenterByLngLatPosition(_ref4) {\n      var lngLat = _ref4.lngLat,\n          pos = _ref4.pos;\n      var fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n      var toLocation = lngLatToWorld(lngLat);\n      var translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n      var newCenter = vec2.add([], this.center, translate);\n      return worldToLngLat(newCenter);\n    }\n  }, {\n    key: \"getLocationAtPoint\",\n    value: function getLocationAtPoint(_ref5) {\n      var lngLat = _ref5.lngLat,\n          pos = _ref5.pos;\n      return this.getMapCenterByLngLatPosition({\n        lngLat: lngLat,\n        pos: pos\n      });\n    }\n  }, {\n    key: \"fitBounds\",\n    value: function fitBounds(bounds) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var width = this.width,\n          height = this.height;\n\n      var _fitBounds2 = _fitBounds(Object.assign({\n        width: width,\n        height: height,\n        bounds: bounds\n      }, options)),\n          longitude = _fitBounds2.longitude,\n          latitude = _fitBounds2.latitude,\n          zoom = _fitBounds2.zoom;\n\n      return new WebMercatorViewport({\n        width: width,\n        height: height,\n        longitude: longitude,\n        latitude: latitude,\n        zoom: zoom\n      });\n    }\n  }, {\n    key: \"getBounds\",\n    value: function getBounds(options) {\n      var corners = this.getBoundingRegion(options);\n      var west = Math.min.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[0];\n      })));\n      var east = Math.max.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[0];\n      })));\n      var south = Math.min.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[1];\n      })));\n      var north = Math.max.apply(Math, _toConsumableArray(corners.map(function (p) {\n        return p[1];\n      })));\n      return [[west, south], [east, north]];\n    }\n  }, {\n    key: \"getBoundingRegion\",\n    value: function getBoundingRegion() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return getBounds(this, options.z || 0);\n    }\n  }]);\n\n  return WebMercatorViewport;\n}();\n\nexport { WebMercatorViewport as default };","map":{"version":3,"mappings":"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","names":["createMat4","zoomToScale","pixelsToWorld","lngLatToWorld","worldToLngLat","worldToPixels","altitudeToFovy","fovyToAltitude","DEFAULT_ALTITUDE","getProjectionMatrix","getDistanceScales","getViewMatrix","fitBounds","getBounds","mat4","vec2","vec3","WebMercatorViewport","constructor","width","height","latitude","longitude","zoom","pitch","bearing","altitude","fovy","position","nearZMultiplier","farZMultiplier","scale","Math","max","distanceScales","center","add","mul","unitsPerMeter","projectionMatrix","viewMatrix","meterOffset","_initMatrices","equals","bind","project","unproject","projectPosition","unprojectPosition","Object","freeze","vpm","multiply","viewProjectionMatrix","m","translate","mInverse","invert","Error","pixelProjectionMatrix","pixelUnprojectionMatrix","viewport","xyz","topLeft","worldPosition","coord","x","y","y2","length","targetZ","undefined","z","targetZWorld","X","Y","Z","Number","isFinite","metersPerUnit","projectFlat","lngLat","unprojectFlat","xy","getMapCenterByLngLatPosition","pos","fromLocation","toLocation","negate","newCenter","getLocationAtPoint","bounds","options","assign","corners","getBoundingRegion","west","min","map","p","east","south","north"],"sources":["../../src/web-mercator-viewport.js"],"sourcesContent":["// View and Projection Matrix calculations for mapbox-js style map view properties\nimport {createMat4} from './math-utils';\n\nimport {\n  zoomToScale,\n  pixelsToWorld,\n  lngLatToWorld,\n  worldToLngLat,\n  worldToPixels,\n  altitudeToFovy,\n  fovyToAltitude,\n  DEFAULT_ALTITUDE,\n  getProjectionMatrix,\n  getDistanceScales,\n  getViewMatrix\n} from './web-mercator-utils';\nimport fitBounds from './fit-bounds';\nimport getBounds from './get-bounds';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\n\nexport default class WebMercatorViewport {\n  // eslint-disable-next-line max-statements\n  constructor(\n    {\n      // Map state\n      width,\n      height,\n      latitude = 0,\n      longitude = 0,\n      zoom = 0,\n      pitch = 0,\n      bearing = 0,\n      altitude = null,\n      fovy = null,\n      position = null,\n      nearZMultiplier = 0.02,\n      farZMultiplier = 1.01\n    } = {width: 1, height: 1}\n  ) {\n    // Silently allow apps to send in 0,0 to facilitate isomorphic render etc\n    width = width || 1;\n    height = height || 1;\n\n    // `fovy` & `altitude` are independent parameters, one for the\n    // projection and the latter for the view matrix. In the past,\n    // the `fovy` was always derived from the `altitude`\n    if (fovy === null && altitude === null) {\n      altitude = DEFAULT_ALTITUDE;\n      fovy = altitudeToFovy(altitude);\n    } else if (fovy === null) {\n      fovy = altitudeToFovy(altitude);\n    } else if (altitude === null) {\n      altitude = fovyToAltitude(fovy);\n    }\n\n    const scale = zoomToScale(zoom);\n    // Altitude - prevent division by 0\n    // TODO - just throw an Error instead?\n    altitude = Math.max(0.75, altitude);\n\n    const distanceScales = getDistanceScales({longitude, latitude});\n\n    const center = lngLatToWorld([longitude, latitude]);\n    center[2] = 0;\n\n    if (position) {\n      vec3.add(center, center, vec3.mul([], position, distanceScales.unitsPerMeter));\n    }\n\n    this.projectionMatrix = getProjectionMatrix({\n      width,\n      height,\n      pitch,\n      fovy,\n      nearZMultiplier,\n      farZMultiplier\n    });\n\n    this.viewMatrix = getViewMatrix({\n      height,\n      scale,\n      center,\n      pitch,\n      bearing,\n      altitude\n    });\n\n    // Save parameters\n    this.width = width;\n    this.height = height;\n    this.scale = scale;\n\n    this.latitude = latitude;\n    this.longitude = longitude;\n    this.zoom = zoom;\n    this.pitch = pitch;\n    this.bearing = bearing;\n    this.altitude = altitude;\n    this.fovy = fovy;\n    this.center = center;\n    this.meterOffset = position || [0, 0, 0];\n\n    this.distanceScales = distanceScales;\n\n    this._initMatrices();\n\n    // Bind methods for easy access\n    this.equals = this.equals.bind(this);\n    this.project = this.project.bind(this);\n    this.unproject = this.unproject.bind(this);\n    this.projectPosition = this.projectPosition.bind(this);\n    this.unprojectPosition = this.unprojectPosition.bind(this);\n\n    Object.freeze(this);\n  }\n\n  _initMatrices() {\n    const {width, height, projectionMatrix, viewMatrix} = this;\n\n    // Note: As usual, matrix operations should be applied in \"reverse\" order\n    // since vectors will be multiplied in from the right during transformation\n    const vpm = createMat4();\n    mat4.multiply(vpm, vpm, projectionMatrix);\n    mat4.multiply(vpm, vpm, viewMatrix);\n    this.viewProjectionMatrix = vpm;\n\n    // Calculate matrices and scales needed for projection\n    /**\n     * Builds matrices that converts preprojected lngLats to screen pixels\n     * and vice versa.\n     * Note: Currently returns bottom-left coordinates!\n     * Note: Starts with the GL projection matrix and adds steps to the\n     *       scale and translate that matrix onto the window.\n     * Note: WebGL controls clip space to screen projection with gl.viewport\n     *       and does not need this step.\n     */\n    const m = createMat4();\n\n    // matrix for conversion from location to screen coordinates\n    mat4.scale(m, m, [width / 2, -height / 2, 1]);\n    mat4.translate(m, m, [1, -1, 0]);\n    mat4.multiply(m, m, vpm);\n\n    const mInverse = mat4.invert(createMat4(), m);\n    if (!mInverse) {\n      throw new Error('Pixel project matrix not invertible');\n    }\n\n    this.pixelProjectionMatrix = m;\n    this.pixelUnprojectionMatrix = mInverse;\n  }\n\n  // Two viewports are equal if width and height are identical, and if\n  // their view and projection matrices are (approximately) equal.\n  equals(viewport) {\n    if (!(viewport instanceof WebMercatorViewport)) {\n      return false;\n    }\n\n    return (\n      viewport.width === this.width &&\n      viewport.height === this.height &&\n      mat4.equals(viewport.projectionMatrix, this.projectionMatrix) &&\n      mat4.equals(viewport.viewMatrix, this.viewMatrix)\n    );\n  }\n\n  // Projects xyz (possibly latitude and longitude) to pixel coordinates in window\n  // using viewport projection parameters\n  project(xyz, {topLeft = true} = {}) {\n    const worldPosition = this.projectPosition(xyz);\n    const coord = worldToPixels(worldPosition, this.pixelProjectionMatrix);\n\n    const [x, y] = coord;\n    const y2 = topLeft ? y : this.height - y;\n    return xyz.length === 2 ? [x, y2] : [x, y2, coord[2]];\n  }\n\n  // Unproject pixel coordinates on screen onto world coordinates,\n  // (possibly [lon, lat]) on map.\n  unproject(xyz, {topLeft = true, targetZ = undefined} = {}) {\n    const [x, y, z] = xyz;\n\n    const y2 = topLeft ? y : this.height - y;\n    const targetZWorld = targetZ && targetZ * this.distanceScales.unitsPerMeter[2];\n    const coord = pixelsToWorld([x, y2, z], this.pixelUnprojectionMatrix, targetZWorld);\n    const [X, Y, Z] = this.unprojectPosition(coord);\n\n    if (Number.isFinite(z)) {\n      return [X, Y, Z];\n    }\n    return Number.isFinite(targetZ) ? [X, Y, targetZ] : [X, Y];\n  }\n\n  // NON_LINEAR PROJECTION HOOKS\n  // Used for web meractor projection\n\n  projectPosition(xyz) {\n    const [X, Y] = lngLatToWorld(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.unitsPerMeter[2];\n    return [X, Y, Z];\n  }\n\n  unprojectPosition(xyz) {\n    const [X, Y] = worldToLngLat(xyz);\n    const Z = (xyz[2] || 0) * this.distanceScales.metersPerUnit[2];\n    return [X, Y, Z];\n  }\n\n  // Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n  projectFlat(lngLat) {\n    return lngLatToWorld(lngLat);\n  }\n\n  // Unproject world point [x,y] on map onto {lat, lon} on sphere\n  unprojectFlat(xy) {\n    return worldToLngLat(xy);\n  }\n\n  // Get the map center that place a given [lng, lat] coordinate at screen point [x, y]\n  getMapCenterByLngLatPosition({lngLat, pos}) {\n    const fromLocation = pixelsToWorld(pos, this.pixelUnprojectionMatrix);\n    const toLocation = lngLatToWorld(lngLat);\n\n    const translate = vec2.add([], toLocation, vec2.negate([], fromLocation));\n    const newCenter = vec2.add([], this.center, translate);\n\n    return worldToLngLat(newCenter);\n  }\n\n  // Legacy method name\n  getLocationAtPoint({lngLat, pos}) {\n    return this.getMapCenterByLngLatPosition({lngLat, pos});\n  }\n\n  // Returns a new viewport that fit around the given rectangle.\n  fitBounds(bounds, options = {}) {\n    const {width, height} = this;\n    const {longitude, latitude, zoom} = fitBounds(Object.assign({width, height, bounds}, options));\n    return new WebMercatorViewport({width, height, longitude, latitude, zoom});\n  }\n\n  getBounds(options) {\n    const corners = this.getBoundingRegion(options);\n\n    const west = Math.min(...corners.map((p) => p[0]));\n    const east = Math.max(...corners.map((p) => p[0]));\n    const south = Math.min(...corners.map((p) => p[1]));\n    const north = Math.max(...corners.map((p) => p[1]));\n    return [\n      [west, south],\n      [east, north]\n    ];\n  }\n\n  getBoundingRegion(options = {}) {\n    return getBounds(this, options.z || 0);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}