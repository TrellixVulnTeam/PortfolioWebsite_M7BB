{"ast":null,"code":"import _slicedToArray from \"/Users/mast/Projects/Portfolio/themeforest-GWahQa9C-tokyo-react-personal-portfolio-template/tokyo/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { createMat4, transformVector, log2 } from './math-utils';\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\nvar PI = Math.PI;\nvar PI_4 = PI / 4;\nvar DEGREES_TO_RADIANS = PI / 180;\nvar RADIANS_TO_DEGREES = 180 / PI;\nvar TILE_SIZE = 512;\nvar EARTH_CIRCUMFERENCE = 40.03e6;\nexport var MAX_LATITUDE = 85.051129;\nexport var DEFAULT_ALTITUDE = 1.5;\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\nexport function scaleToZoom(scale) {\n  return log2(scale);\n}\nexport function lngLatToWorld(_ref) {\n  var _ref2 = _slicedToArray(_ref, 2),\n      lng = _ref2[0],\n      lat = _ref2[1];\n\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n  var lambda2 = lng * DEGREES_TO_RADIANS;\n  var phi2 = lat * DEGREES_TO_RADIANS;\n  var x = TILE_SIZE * (lambda2 + PI) / (2 * PI);\n  var y = TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5))) / (2 * PI);\n  return [x, y];\n}\nexport function worldToLngLat(_ref3) {\n  var _ref4 = _slicedToArray(_ref3, 2),\n      x = _ref4[0],\n      y = _ref4[1];\n\n  var lambda2 = x / TILE_SIZE * (2 * PI) - PI;\n  var phi2 = 2 * (Math.atan(Math.exp(y / TILE_SIZE * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\nexport function getMeterZoom(_ref5) {\n  var latitude = _ref5.latitude;\n  assert(Number.isFinite(latitude));\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\nexport function getDistanceScales(_ref6) {\n  var latitude = _ref6.latitude,\n      longitude = _ref6.longitude,\n      _ref6$highPrecision = _ref6.highPrecision,\n      highPrecision = _ref6$highPrecision === void 0 ? false : _ref6$highPrecision;\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n  var result = {};\n  var worldSize = TILE_SIZE;\n  var latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  var unitsPerDegreeX = worldSize / 360;\n  var unitsPerDegreeY = unitsPerDegreeX / latCosine;\n  var altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n  result.unitsPerMeter = [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter];\n  result.metersPerUnit = [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter];\n  result.unitsPerDegree = [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter];\n  result.degreesPerUnit = [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter];\n\n  if (highPrecision) {\n    var latCosine2 = DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS) / latCosine;\n    var unitsPerDegreeY2 = unitsPerDegreeX * latCosine2 / 2;\n    var altUnitsPerDegree2 = worldSize / EARTH_CIRCUMFERENCE * latCosine2;\n    var altUnitsPerMeter2 = altUnitsPerDegree2 / unitsPerDegreeY * altUnitsPerMeter;\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  return result;\n}\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  var _lngLatZ = _slicedToArray(lngLatZ, 3),\n      longitude = _lngLatZ[0],\n      latitude = _lngLatZ[1],\n      z0 = _lngLatZ[2];\n\n  var _xyz = _slicedToArray(xyz, 3),\n      x = _xyz[0],\n      y = _xyz[1],\n      z = _xyz[2];\n\n  var _getDistanceScales = getDistanceScales({\n    longitude: longitude,\n    latitude: latitude,\n    highPrecision: true\n  }),\n      unitsPerMeter = _getDistanceScales.unitsPerMeter,\n      unitsPerMeter2 = _getDistanceScales.unitsPerMeter2;\n\n  var worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n  var newLngLat = worldToLngLat(worldspace);\n  var newZ = (z0 || 0) + (z || 0);\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\nexport function getViewMatrix(_ref7) {\n  var height = _ref7.height,\n      pitch = _ref7.pitch,\n      bearing = _ref7.bearing,\n      altitude = _ref7.altitude,\n      scale = _ref7.scale,\n      _ref7$center = _ref7.center,\n      center = _ref7$center === void 0 ? null : _ref7$center;\n  var vm = createMat4();\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n  scale /= height;\n  mat4.scale(vm, vm, [scale, scale, scale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\nexport function getProjectionParameters(_ref8) {\n  var width = _ref8.width,\n      height = _ref8.height,\n      _ref8$fovy = _ref8.fovy,\n      fovy = _ref8$fovy === void 0 ? altitudeToFovy(DEFAULT_ALTITUDE) : _ref8$fovy,\n      altitude = _ref8.altitude,\n      _ref8$pitch = _ref8.pitch,\n      pitch = _ref8$pitch === void 0 ? 0 : _ref8$pitch,\n      _ref8$nearZMultiplier = _ref8.nearZMultiplier,\n      nearZMultiplier = _ref8$nearZMultiplier === void 0 ? 1 : _ref8$nearZMultiplier,\n      _ref8$farZMultiplier = _ref8.farZMultiplier,\n      farZMultiplier = _ref8$farZMultiplier === void 0 ? 1 : _ref8$farZMultiplier;\n\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n\n  var halfFov = 0.5 * fovy * DEGREES_TO_RADIANS;\n  var focalDistance = fovyToAltitude(fovy);\n  var pitchRadians = pitch * DEGREES_TO_RADIANS;\n  var topHalfSurfaceDistance = Math.sin(halfFov) * focalDistance / Math.sin(Math.min(Math.max(Math.PI / 2 - pitchRadians - halfFov, 0.01), Math.PI - 0.01));\n  var farZ = Math.sin(pitchRadians) * topHalfSurfaceDistance + focalDistance;\n  return {\n    fov: 2 * halfFov,\n    aspect: width / height,\n    focalDistance: focalDistance,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\nexport function getProjectionMatrix(_ref9) {\n  var width = _ref9.width,\n      height = _ref9.height,\n      pitch = _ref9.pitch,\n      altitude = _ref9.altitude,\n      fovy = _ref9.fovy,\n      nearZMultiplier = _ref9.nearZMultiplier,\n      farZMultiplier = _ref9.farZMultiplier;\n\n  var _getProjectionParamet = getProjectionParameters({\n    width: width,\n    height: height,\n    altitude: altitude,\n    fovy: fovy,\n    pitch: pitch,\n    nearZMultiplier: nearZMultiplier,\n    farZMultiplier: farZMultiplier\n  }),\n      fov = _getProjectionParamet.fov,\n      aspect = _getProjectionParamet.aspect,\n      near = _getProjectionParamet.near,\n      far = _getProjectionParamet.far;\n\n  var projectionMatrix = mat4.perspective([], fov, aspect, near, far);\n  return projectionMatrix;\n}\nexport function altitudeToFovy(altitude) {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\nexport function fovyToAltitude(fovy) {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  var _xyz2 = _slicedToArray(xyz, 3),\n      x = _xyz2[0],\n      y = _xyz2[1],\n      _xyz2$ = _xyz2[2],\n      z = _xyz2$ === void 0 ? 0 : _xyz2$;\n\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix) {\n  var targetZ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n\n  var _xyz3 = _slicedToArray(xyz, 3),\n      x = _xyz3[0],\n      y = _xyz3[1],\n      z = _xyz3[2];\n\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    var coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  var coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  var coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n  var z0 = coord0[2];\n  var z1 = coord1[2];\n  var t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}","map":{"version":3,"mappings":"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","names":["createMat4","transformVector","log2","mat4","vec2","vec3","assert","PI","Math","PI_4","DEGREES_TO_RADIANS","RADIANS_TO_DEGREES","TILE_SIZE","EARTH_CIRCUMFERENCE","MAX_LATITUDE","DEFAULT_ALTITUDE","zoomToScale","zoom","pow","scaleToZoom","scale","lngLatToWorld","lng","lat","Number","isFinite","lambda2","phi2","x","y","log","tan","worldToLngLat","atan","exp","getMeterZoom","latitude","latCosine","cos","getDistanceScales","longitude","highPrecision","result","worldSize","unitsPerDegreeX","unitsPerDegreeY","altUnitsPerMeter","unitsPerMeter","metersPerUnit","unitsPerDegree","degreesPerUnit","latCosine2","unitsPerDegreeY2","altUnitsPerDegree2","altUnitsPerMeter2","unitsPerDegree2","unitsPerMeter2","addMetersToLngLat","lngLatZ","xyz","z0","z","worldspace","newLngLat","newZ","getViewMatrix","height","pitch","bearing","altitude","center","vm","translate","rotateX","rotateZ","negate","getProjectionParameters","width","fovy","altitudeToFovy","nearZMultiplier","farZMultiplier","undefined","halfFov","focalDistance","fovyToAltitude","pitchRadians","topHalfSurfaceDistance","sin","min","max","farZ","fov","aspect","near","far","getProjectionMatrix","projectionMatrix","perspective","worldToPixels","pixelProjectionMatrix","pixelsToWorld","pixelUnprojectionMatrix","targetZ","coord","coord0","coord1","z1","t","lerp"],"sources":["../../src/web-mercator-utils.js"],"sourcesContent":["// TODO - THE UTILITIES IN THIS FILE SHOULD BE IMPORTED FROM WEB-MERCATOR-VIEWPORT MODULE\n\nimport {createMat4, transformVector, log2} from './math-utils';\n\nimport * as mat4 from 'gl-matrix/mat4';\nimport * as vec2 from 'gl-matrix/vec2';\nimport * as vec3 from 'gl-matrix/vec3';\nimport assert from './assert';\n\n// CONSTANTS\nconst PI = Math.PI;\nconst PI_4 = PI / 4;\nconst DEGREES_TO_RADIANS = PI / 180;\nconst RADIANS_TO_DEGREES = 180 / PI;\nconst TILE_SIZE = 512;\n// Average circumference (40075 km equatorial, 40007 km meridional)\nconst EARTH_CIRCUMFERENCE = 40.03e6;\n// Latitude that makes a square world, 2 * atan(E ** PI) - PI / 2\nexport const MAX_LATITUDE = 85.051129;\n\n// Mapbox default altitude\nexport const DEFAULT_ALTITUDE = 1.5;\n\n/** Util functions **/\nexport function zoomToScale(zoom) {\n  return Math.pow(2, zoom);\n}\n\nexport function scaleToZoom(scale) {\n  return log2(scale);\n}\n\n/**\n * Project [lng,lat] on sphere onto [x,y] on 512*512 Mercator Zoom 0 tile.\n * Performs the nonlinear part of the web mercator projection.\n * Remaining projection is done with 4x4 matrices which also handles\n * perspective.\n *\n * @param lngLat - [lng, lat] coordinates\n *   Specifies a point on the sphere to project onto the map.\n * @return [x,y] coordinates.\n */\nexport function lngLatToWorld([lng, lat]) {\n  assert(Number.isFinite(lng));\n  assert(Number.isFinite(lat) && lat >= -90 && lat <= 90, 'invalid latitude');\n\n  const lambda2 = lng * DEGREES_TO_RADIANS;\n  const phi2 = lat * DEGREES_TO_RADIANS;\n  const x = (TILE_SIZE * (lambda2 + PI)) / (2 * PI);\n  const y = (TILE_SIZE * (PI + Math.log(Math.tan(PI_4 + phi2 * 0.5)))) / (2 * PI);\n  return [x, y];\n}\n\n// Unproject world point [x,y] on map onto {lat, lon} on sphere\nexport function worldToLngLat([x, y]) {\n  const lambda2 = (x / TILE_SIZE) * (2 * PI) - PI;\n  const phi2 = 2 * (Math.atan(Math.exp((y / TILE_SIZE) * (2 * PI) - PI)) - PI_4);\n  return [lambda2 * RADIANS_TO_DEGREES, phi2 * RADIANS_TO_DEGREES];\n}\n\n// Returns the zoom level that gives a 1 meter pixel at a certain latitude\n// 1 = C*cos(y)/2^z/TILE_SIZE = C*cos(y)/2^(z+9)\nexport function getMeterZoom({latitude}) {\n  assert(Number.isFinite(latitude));\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n  return scaleToZoom(EARTH_CIRCUMFERENCE * latCosine) - 9;\n}\n\n/**\n * Calculate distance scales in meters around current lat/lon, both for\n * degrees and pixels.\n * In mercator projection mode, the distance scales vary significantly\n * with latitude.\n */\n\nexport function getDistanceScales({latitude, longitude, highPrecision = false}) {\n  assert(Number.isFinite(latitude) && Number.isFinite(longitude));\n\n  const result = {};\n  const worldSize = TILE_SIZE;\n  const latCosine = Math.cos(latitude * DEGREES_TO_RADIANS);\n\n  /**\n   * Number of pixels occupied by one degree longitude around current lat/lon:\n     unitsPerDegreeX = d(lngLatToWorld([lng, lat])[0])/d(lng)\n       = scale * TILE_SIZE * DEGREES_TO_RADIANS / (2 * PI)\n     unitsPerDegreeY = d(lngLatToWorld([lng, lat])[1])/d(lat)\n       = -scale * TILE_SIZE * DEGREES_TO_RADIANS / cos(lat * DEGREES_TO_RADIANS)  / (2 * PI)\n   */\n  const unitsPerDegreeX = worldSize / 360;\n  const unitsPerDegreeY = unitsPerDegreeX / latCosine;\n\n  /**\n   * Number of pixels occupied by one meter around current lat/lon:\n   */\n  const altUnitsPerMeter = worldSize / EARTH_CIRCUMFERENCE / latCosine;\n\n  /**\n   * LngLat: longitude -> east and latitude -> north (bottom left)\n   * UTM meter offset: x -> east and y -> north (bottom left)\n   * World space: x -> east and y -> south (top left)\n   *\n   * Y needs to be flipped when converting delta degree/meter to delta pixels\n   */\n  result.unitsPerMeter = [altUnitsPerMeter, altUnitsPerMeter, altUnitsPerMeter];\n  result.metersPerUnit = [1 / altUnitsPerMeter, 1 / altUnitsPerMeter, 1 / altUnitsPerMeter];\n\n  result.unitsPerDegree = [unitsPerDegreeX, unitsPerDegreeY, altUnitsPerMeter];\n  result.degreesPerUnit = [1 / unitsPerDegreeX, 1 / unitsPerDegreeY, 1 / altUnitsPerMeter];\n\n  /**\n   * Taylor series 2nd order for 1/latCosine\n     f'(a) * (x - a)\n       = d(1/cos(lat * DEGREES_TO_RADIANS))/d(lat) * dLat\n       = DEGREES_TO_RADIANS * tan(lat * DEGREES_TO_RADIANS) / cos(lat * DEGREES_TO_RADIANS) * dLat\n   */\n  if (highPrecision) {\n    const latCosine2 = (DEGREES_TO_RADIANS * Math.tan(latitude * DEGREES_TO_RADIANS)) / latCosine;\n    const unitsPerDegreeY2 = (unitsPerDegreeX * latCosine2) / 2;\n    const altUnitsPerDegree2 = (worldSize / EARTH_CIRCUMFERENCE) * latCosine2;\n    const altUnitsPerMeter2 = (altUnitsPerDegree2 / unitsPerDegreeY) * altUnitsPerMeter;\n\n    result.unitsPerDegree2 = [0, unitsPerDegreeY2, altUnitsPerDegree2];\n    result.unitsPerMeter2 = [altUnitsPerMeter2, 0, altUnitsPerMeter2];\n  }\n\n  // Main results, used for converting meters to latlng deltas and scaling offsets\n  return result;\n}\n\n/**\n * Offset a lng/lat position by meterOffset (northing, easting)\n */\nexport function addMetersToLngLat(lngLatZ, xyz) {\n  const [longitude, latitude, z0] = lngLatZ;\n  const [x, y, z] = xyz;\n\n  const {unitsPerMeter, unitsPerMeter2} = getDistanceScales({\n    longitude,\n    latitude,\n    highPrecision: true\n  });\n\n  const worldspace = lngLatToWorld(lngLatZ);\n  worldspace[0] += x * (unitsPerMeter[0] + unitsPerMeter2[0] * y);\n  worldspace[1] += y * (unitsPerMeter[1] + unitsPerMeter2[1] * y);\n\n  // @ts-ignore\n  const newLngLat = worldToLngLat(worldspace);\n  const newZ = (z0 || 0) + (z || 0);\n\n  return Number.isFinite(z0) || Number.isFinite(z) ? [newLngLat[0], newLngLat[1], newZ] : newLngLat;\n}\n\n// ATTRIBUTION:\n// view and projection matrix creation is intentionally kept compatible with\n// mapbox-gl's implementation to ensure that seamless interoperation\n// with mapbox and react-map-gl. See: https://github.com/mapbox/mapbox-gl-js\n\nexport function getViewMatrix({\n  // Viewport props\n  height,\n  pitch,\n  bearing,\n  altitude,\n  // Pre-calculated parameters\n  scale,\n  center = null\n}) {\n  // VIEW MATRIX: PROJECTS MERCATOR WORLD COORDINATES\n  // Note that mercator world coordinates typically need to be flipped\n  //\n  // Note: As usual, matrix operation orders should be read in reverse\n  // since vectors will be multiplied from the right during transformation\n  const vm = createMat4();\n\n  // Move camera to altitude (along the pitch & bearing direction)\n  mat4.translate(vm, vm, [0, 0, -altitude]);\n\n  // Rotate by bearing, and then by pitch (which tilts the view)\n  mat4.rotateX(vm, vm, -pitch * DEGREES_TO_RADIANS);\n  mat4.rotateZ(vm, vm, bearing * DEGREES_TO_RADIANS);\n\n  scale /= height;\n  mat4.scale(vm, vm, [scale, scale, scale]);\n\n  if (center) {\n    mat4.translate(vm, vm, vec3.negate([], center));\n  }\n\n  return vm;\n}\n\n// PROJECTION MATRIX PARAMETERS\n// Variable fov (in radians)\nexport function getProjectionParameters({\n  width,\n  height,\n  fovy = altitudeToFovy(DEFAULT_ALTITUDE),\n  altitude,\n  pitch = 0,\n  nearZMultiplier = 1,\n  farZMultiplier = 1\n}) {\n  // For back-compatibility allow field of view to be\n  // derived from altitude\n  if (altitude !== undefined) {\n    fovy = altitudeToFovy(altitude);\n  }\n  const halfFov = 0.5 * fovy * DEGREES_TO_RADIANS;\n  const focalDistance = fovyToAltitude(fovy);\n\n  // Find the distance from the center point to the center top\n  // in focal distance units using law of sines.\n  const pitchRadians = pitch * DEGREES_TO_RADIANS;\n  const topHalfSurfaceDistance =\n    (Math.sin(halfFov) * focalDistance) /\n    Math.sin(Math.min(Math.max(Math.PI / 2 - pitchRadians - halfFov, 0.01), Math.PI - 0.01));\n\n  // Calculate z value of the farthest fragment that should be rendered.\n  const farZ = Math.sin(pitchRadians) * topHalfSurfaceDistance + focalDistance;\n\n  return {\n    fov: 2 * halfFov,\n    aspect: width / height,\n    focalDistance,\n    near: nearZMultiplier,\n    far: farZ * farZMultiplier\n  };\n}\n\n// PROJECTION MATRIX: PROJECTS FROM CAMERA (VIEW) SPACE TO CLIPSPACE\n// To match mapbox's z buffer:\n// <= 0.28 - nearZMultiplier: 0.1, farZmultiplier: 1\n// >= 0.29 - nearZMultiplier: 1 / height, farZMultiplier: 1.01\nexport function getProjectionMatrix({\n  width,\n  height,\n  pitch,\n  altitude,\n  fovy,\n  nearZMultiplier,\n  farZMultiplier\n}) {\n  const {fov, aspect, near, far} = getProjectionParameters({\n    width,\n    height,\n    altitude,\n    fovy,\n    pitch,\n    nearZMultiplier,\n    farZMultiplier\n  });\n\n  const projectionMatrix = mat4.perspective(\n    [],\n    fov, // fov in radians\n    aspect, // aspect ratio\n    near, // near plane\n    far // far plane\n  );\n\n  return projectionMatrix;\n}\n\n// Utility function to calculate the field of view such that\n// the focal distance is equal to the ground distance. This\n// is how mapbox's z fov is calculated\nexport function altitudeToFovy(altitude) {\n  return 2 * Math.atan(0.5 / altitude) * RADIANS_TO_DEGREES;\n}\n\nexport function fovyToAltitude(fovy) {\n  return 0.5 / Math.tan(0.5 * fovy * DEGREES_TO_RADIANS);\n}\n\n// Project flat coordinates to pixels on screen.\nexport function worldToPixels(xyz, pixelProjectionMatrix) {\n  const [x, y, z = 0] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y) && Number.isFinite(z));\n\n  return transformVector(pixelProjectionMatrix, [x, y, z, 1]);\n}\n\n// Unproject pixels on screen to flat coordinates.\nexport function pixelsToWorld(xyz, pixelUnprojectionMatrix, targetZ = 0) {\n  const [x, y, z] = xyz;\n  assert(Number.isFinite(x) && Number.isFinite(y), 'invalid pixel coordinate');\n\n  if (Number.isFinite(z)) {\n    // Has depth component\n    const coord = transformVector(pixelUnprojectionMatrix, [x, y, z, 1]);\n    return coord;\n  }\n\n  // since we don't know the correct projected z value for the point,\n  // unproject two points to get a line and then find the point on that line with z=0\n  const coord0 = transformVector(pixelUnprojectionMatrix, [x, y, 0, 1]);\n  const coord1 = transformVector(pixelUnprojectionMatrix, [x, y, 1, 1]);\n\n  const z0 = coord0[2];\n  const z1 = coord1[2];\n\n  const t = z0 === z1 ? 0 : ((targetZ || 0) - z0) / (z1 - z0);\n  return vec2.lerp([], coord0, coord1, t);\n}\n"]},"metadata":{},"sourceType":"module"}